#!/usr/bin/perl
###############################################################################
##
# FILE:		reldate
# PRODUCT:	tools
# AUTHOR:	Ingo Karkat <ingo@karkat.de>
# DATE CREATED:	09-Feb-2016
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# @(#)reldate	$Id$ reldate
###############################################################################

package Local::Reldate;

use IO::Interactive qw(is_interactive);
use List::Util qw(first);
use Modern::Perl;
use Getopt::Long qw(GetOptionsFromArray);
use Pod::Usage;
use Time::Duration;
use Time::Local;
use Time::Piece;

my @monthsShort = qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/;
my @monthsLong = qw/January February March April May June July August September October November December/;
my $monthsExpr = join('|', @monthsShort, @monthsLong);
my $nowFuncref = sub { return $^T; };
my $now = $nowFuncref->();
my $baseEpoch;
my @defaultMassages = (\&massageWeekdays, \&massageFull);
my @shortenUnitsMassage = ();
my $isShortRelations = 0;
my $isShortUnits = 0;
my ($datePattern, $epochPattern, $diffPattern, $keepWidth, $precision, $isPreferPast, $isPreferFuture, $isWithWeekday, $isWorkDay, $WEEK_IN_SECONDS, $DAY_IN_SECONDS, $colorPrefix, $colorSuffix, $prefix, $suffix, $isRelative, $isDelta, $isEach);
my $relativizer = \&ago;

sub renderDifference {
    my $duration = shift;
    return '' . (-1 * $duration);
}

sub convertSecondsToDurationUnits {
    my $seconds = shift;

    my $weeks = int($seconds / $WEEK_IN_SECONDS);
    $seconds = $seconds - ($WEEK_IN_SECONDS * $weeks);
    my $days = int($seconds / $DAY_IN_SECONDS);
    $seconds = $seconds - ($DAY_IN_SECONDS * $days);
    my $hours = int($seconds / 3600);
    $seconds = $seconds - (3600 * $hours);
    my $minutes = int($seconds / 60);
    $seconds = $seconds - (60 * $minutes);

    my $workDayPrefix = ($isWorkDay ? 'w' : '');

    if ($minutes == 0 || $seconds == 0) {
    	return (
		($weeks > 0 ? $weeks . $workDayPrefix . 'w' : ''),
		($days > 0 ? $days . $workDayPrefix . 'd' : ''),
		($hours > 0 ? $hours . 'h' : ''),
		($minutes > 0 ? $minutes . 'm' : ''),
		($seconds > 0 ? $seconds . 's' : ''));
    } else {
	return (
		($weeks > 0 ? $weeks . $workDayPrefix . 'w' : ''),
		($days > 0 ? $days . $workDayPrefix . 'd' : ''),
		($weeks > 0 || $days > 0 || $hours > 0 ? sprintf('%02d', $hours) . ':' : '') .
		    ($weeks > 0 || $days > 0 || $hours > 0 || $minutes > 0 ? sprintf('%02d', $minutes) . ':' : '') .
		    ($weeks > 0 || $days > 0 || $hours > 0 || $minutes > 0 ? sprintf('%02d', $seconds) : sprintf('00:%02d', $seconds)));
    }
}
sub renderDuration {
    my ($integer, $precision) = @_;

    my $sign = ($integer > 0 ? '-' : '');
    $integer = abs($integer);

    my $seconds = $integer;
    my @rounder = (60, 3600, $DAY_IN_SECONDS, $WEEK_IN_SECONDS);
    while (1) {
	my @units = grep { /\S/ } convertSecondsToDurationUnits($seconds);
	return $sign . join(' ', @units) if (@units <= $precision);

	my $r = shift(@rounder);
	$seconds = int($integer / $r + 0.5) * $r;
    };
}

sub setNowSource {
    (undef, $nowFuncref) = @_;
    $now = $nowFuncref->();
}

sub numericalMonth {
    my $month = shift;
    return $month - 1 if $month =~ m/^\d+$/;

    my $index = first { $monthsShort[$_] eq $month } 0 .. $#monthsShort;
    return $index if defined $index;

    $index = first { $monthsLong[$_] eq $month } 0 .. $#monthsLong;
    return $index if defined $index;

    die "Should have parsed month";
}

sub toEpoch {
    my ($seconds, $minutes, $hours, $day, $month, $year, $timezone) = @_;
    my $timeConverter = ($timezone ? \&timegm : \&timelocal);

    my $epoch = $timeConverter->($seconds, $minutes, (defined($hours) ? $hours : 12), $day, numericalMonth($month), (defined($year) ? $year : Time::Piece->strptime($now, '%s')->year));

    if (! defined($year) && $isPreferPast && $now - $epoch < 0) {
	$epoch = $timeConverter->($seconds, $minutes, (defined($hours) ? $hours : 12), $day, numericalMonth($month), (defined($year) ? $year : Time::Piece->strptime($now, '%s')->year - 1));
    } elsif (! defined($year) && $isPreferFuture && $now - $epoch > 0) {
	$epoch = $timeConverter->($seconds, $minutes, (defined($hours) ? $hours : 12), $day, numericalMonth($month), (defined($year) ? $year : Time::Piece->strptime($now, '%s')->year + 1));
    }

    return $epoch;
}

sub fromDiff {
    my ($sign, $seconds, $minutes, $hours, $days, $weeks, $months, $years) = @_;

    my $delta = (defined($seconds) ? $seconds : 0);
    $delta += $minutes * 60 if defined($minutes);
    $delta += $hours * 3600 if defined($hours);
    $delta += $days * 86400 if defined($days);
    $delta += $weeks * 604800 if defined($weeks);
    $delta += $months * 2592000 if defined($months);
    $delta += $years * 31536000 if defined($years);

    $delta *= -1 if defined($sign) and $sign eq '-';

    return $delta;
}

sub massageWeekdays {
    my $relativeDate = shift;
    return $relativeDate unless ($isWithWeekday);
    return $relativeDate unless ($relativeDate =~ /^(\d+) days? (ago|from now)$/);

    my $isPast = ($2 eq "ago");
    my $isAdjacentWeekDay = ($1 <= 7);

    my $weekDay = ((localtime($now))[6] + 7 + ($isPast ? -1 : 1) * $1) % 7;
    my $weekDayName = qw(
	Sunday
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Saturday
    )[$weekDay];
    return ($isAdjacentWeekDay ?
	($isPast ? "the previous " : "coming ") . $weekDayName :
	"$relativeDate (a $weekDayName)"
    );
}
sub massageFull {
    my $relativeDate = shift;

    # Massage the output from Time::Duration to make it more amenable to my
    # preferences.
    $relativeDate = ($isShortRelations && $isShortUnits ? 'now' : 'just now') if ($relativeDate eq 'right now');
    $relativeDate = 'yesterday' if ($relativeDate eq '1 day ago');
    $relativeDate = 'tomorrow' if ($relativeDate eq '1 day from now');
    $relativeDate =~ s/(.*) from now$/in $1/;

    return $relativeDate;
}

sub massageForShortTimespan {
    my $relativeDate = shift;

    $relativeDate = ($isShortRelations && $isShortUnits ? '=0s' : 'no time') if ($relativeDate eq 'right now');
    $relativeDate =~ s/ from now$| ago$//;

    return $relativeDate;
}

sub massageToFirst {
    my $relativeDate = shift;

    $relativeDate = 'at its time' if ($relativeDate eq 'right now');
    $relativeDate =~ s/(.*) ago$/$1 before it/;
    $relativeDate =~ s/(.*) from now$/$1 after it/;

    return $relativeDate;
}

sub massageToFirstAgain {
    return 'also ' . massageToFirst(@_);
}

sub massageEach {
    my $relativeDate = shift;

    $relativeDate = ($isShortRelations && $isShortUnits ? '=0s' : 'also then') if ($relativeDate eq 'right now');
    $relativeDate =~ s/(.*) ago$/$isShortRelations ? "-$1" : "$1 earlier"/e;
    $relativeDate =~ s/(.*) from now$/$isShortRelations ? "+$1" : "$1 later"/e;

    return $relativeDate;
}

sub massageToShortUnits {
    my $relativeDate = shift;

    $relativeDate =~ s/ seconds?\b/s/;
    $relativeDate =~ s/ minutes?\b/m/;
    $relativeDate =~ s/ hours?\b/h/;
    $relativeDate =~ s/ days?\b/d/;
    $relativeDate =~ s/ weeks?\b/w/;
    $relativeDate =~ s/ months?\b/mo/;
    $relativeDate =~ s/ years?\b/y/;

    return $relativeDate;
}

sub reldateNormal {
    my $string = shift;
    my @diffMassages = (\&massageEach);
    $string =~ 	s/${datePattern}/$colorPrefix . $prefix . reldate(\@defaultMassages, $now, toEpoch($+{seconds}, $+{minutes}, $+{hours}, $+{day}, $+{month}, $+{year}, $+{timezone}), $&) . $suffix . $colorSuffix/ge if $datePattern;
    $string =~ 	s/${epochPattern}/$colorPrefix . $prefix . reldate(\@defaultMassages, $now, $+{epoch}, $&) . $suffix . $colorSuffix/ge if $epochPattern;
    $string =~ 	s/${diffPattern}/$colorPrefix . $prefix . reldate(\@diffMassages, 0, fromDiff($+{sign}, $+{seconds}, $+{minutes}, $+{hours}, $+{days}, $+{weeks}, $+{months}, $+{years}), $&) . $suffix . $colorSuffix/ge if $diffPattern;
    return $string;
}

sub reldateBase {
    my $string = shift;
    $string =~ s/${datePattern}/deltaReplacement(1, toEpoch($+{seconds}, $+{minutes}, $+{hours}, $+{day}, $+{month}, $+{year}, $+{timezone}), $&)/ge if $datePattern;
    $string =~ s/${epochPattern}/deltaReplacement(1, $+{epoch}, $&)/ge if $epochPattern;
    return $string;
}

sub reldateDelta {
    my $string = shift;
    my $count = 0;
    $string =~ s/${datePattern}/deltaReplacement($count++, toEpoch($+{seconds}, $+{minutes}, $+{hours}, $+{day}, $+{month}, $+{year}, $+{timezone}), $&)/ge if $datePattern;
    $string =~ s/${epochPattern}/deltaReplacement($count++, $+{epoch}, $&)/ge if $epochPattern;
    return $string;
}

sub timespanToReldate {
    my $massagesRef = shift;
    my $timespan = shift;
    my $reldate = $relativizer->($timespan, $precision);

    foreach my $massage (@$massagesRef) {
	$reldate = $massage->($reldate);
    }
    return $reldate;
}

sub reldate {
    my ($massagesRef, $referenceEpoch, $parsedEpoch, $originalDate) = @_;
    my $relativeDate = timespanToReldate($massagesRef, $referenceEpoch - $parsedEpoch);

    if ($keepWidth ne 'no') {
	my $originalWidth = length($originalDate);
	my $availableWidth = $originalWidth - length($prefix) - length($suffix); $availableWidth = 0 if $availableWidth < 0;
	my $flag = ($keepWidth eq 'right-aligned' ? '' : '-');
	$relativeDate = sprintf("%${flag}${availableWidth}s", $relativeDate);
    }
    return $relativeDate;
}

sub deltaReplacement {
    my ($count, $epoch, $originalDate) = @_;

    my @massages = ($isEach ?
	\&massageEach :
	($count == 1) ?
	    \&massageToFirst :
	    \&massageToFirstAgain
    );
    push(@massages, @shortenUnitsMassage);

    my $isFirst = ($count == 0);
    my $isRecordBase = ($isEach ? 1 : $isFirst);

    my $replacement;
    if ($isRelative) {
	$replacement = ($isFirst ?
	    $originalDate :
	    $colorPrefix . $prefix . reldate(\@massages, $baseEpoch, $epoch, $originalDate) . $suffix . $colorSuffix
	);
    } else {
	$replacement = $colorPrefix . $prefix . ($isFirst ?
	    reldate(\@defaultMassages, $now, $epoch, $originalDate) :
	    reldate(\@massages, $baseEpoch, $epoch, $originalDate)
	) . $suffix . $colorSuffix;
    }

    if ($isRecordBase) {
	$baseEpoch = $epoch;
    }

    return $replacement;
}

my ($isDoubleDash, $timespan, $isTimespanLines, $epoch, $within, $reset, $hasDifferentBase);

sub process {
    my ($argumentsRef, $inputHandleRef) = @_;

    if (@$argumentsRef == 1 && ! $isDoubleDash) {
	my $file = @$argumentsRef[0];
	unless (-e $file) {
	    warn "$file does not exist!\n";
	    exit 1;
	}
	my $age = $now - (stat($file))[9];  # 9 = modtime
	print $prefix, timespanToReldate(\@defaultMassages, $age), $suffix, "\n";
    } elsif (defined $timespan) {
	my @massages = (\&massageWeekdays, \&massageForShortTimespan);
	push(@massages, @shortenUnitsMassage);
	print $prefix, timespanToReldate($timespan =~ /^[+-]/ ? \@defaultMassages : \@massages, $timespan), $suffix, "\n";
    } elsif ($isTimespanLines) {
	my @massages = (\&massageWeekdays, \&massageForShortTimespan);
	push(@massages, @shortenUnitsMassage);

	while (readline($inputHandleRef)) {
	    chomp;
	    if (/^(([+-]?)\d+)((?:\s.*)?)$/) {
		print $prefix, timespanToReldate($2 eq "" ? \@massages : \@defaultMassages, $1), $suffix, $3, "\n";
	    } else {
		print $_, "\n";
	    }
	}
    } elsif (defined $epoch) {
	print $prefix, timespanToReldate(\@defaultMassages, $now - $epoch), $suffix, "\n";
    } else {
	my $splitPattern = qr/^.*$/s;
	if (defined $reset) {
	    $/ = $reset;
	} elsif (($within // '') eq 'all') {
	    $/ = undef;
	}
	if (($within // '') eq 'line') {
	    $splitPattern = qr/^.*$/m;
	} elsif (defined $within and $within ne 'all' and $within ne 'line') {
	    $splitPattern = $within;
	}

	my $algorithm;
	if ($hasDifferentBase) {
	    $baseEpoch = $now;
	    $algorithm = \&reldateBase;
	} elsif ($isRelative or $isDelta) {
	    $algorithm = \&reldateDelta;
	} else {
	    $algorithm = \&reldateNormal;
	}

	while (readline($inputHandleRef)) {
	    # Update the current time for each record, to accommodate long-running
	    # parsing.
	    $now = $nowFuncref->() unless $hasDifferentBase;

	    s/${splitPattern}/$algorithm->($&)/ges;
	    print;
	}
    }
}


sub run {
    my (undef, $argumentsRef, $inputHandleRef) = @_;

    $datePattern = join('|', (
	    qr/\b(?<year>\d\d\d\d)(?<month>[01]\d)(?<day>[0123]\d)(?:[ _-](?<hours>[012]\d)(?<minutes>[0-5]\d)(?<seconds>[0-5]\d)?)?\b/,
	    qr/\b(?<year>\d\d\d\d)-(?<month>(?:[01]\d|${monthsExpr}))-(?<day>[0123]\d)(?: (?<hours>[012]\d):(?<minutes>[0-5]\d)(?::(?<seconds>[0-5]\d))?)?\b/,
	    qr/\b(?<day>[0123]\d)-(?<month>(?:[01]\d|${monthsExpr}))-(?<year>\d\d\d\d)(?: (?<hours>[012]\d):(?<minutes>[0-5]\d)(?::(?<seconds>[0-5]\d))?)?\b/,
	    qr/\b(?<month>${monthsExpr})\s+(?<day>[0123]?\d),?(?:\s+(?<year>\d\d\d\d))?(?: (?<hours>[012]\d):(?<minutes>[0-5]\d)(?::(?<seconds>[0-5]\d))?)?\b/,
	    qr/\b(?<year>\d\d\d\d)-(?<month>[01]\d)-(?<day>[0123]\d)T(?<hours>[012]\d):(?<minutes>[0-5]\d):(?<seconds>[0-5]\d)(?<timezone>Z)?\b/)
    );
    $epochPattern = qr/(?<!\w)@(?<epoch>\d{1,10})\b/;
    $diffPattern = qr/(?<!\w)(?<sign>[+-])(?:(?<hours>\d{1,4}):(?<minutes>[0-5]\d):(?<seconds>[0-5]\d)|(?<minutes>\d{1,4}):(?<seconds>[0-5]\d))(?!\w|:)/;
    $keepWidth = 'no';
    $precision = 1;
    $isPreferPast = 0;
    $isPreferFuture = 0;
    $isWithWeekday = 0;
    $isWorkDay = 0;
    my $color = 'auto';
    my $isNoColor = 0;
    $prefix = '';
    $suffix = '';
    $isRelative = 0;
    $isDelta = 0;
    $isEach = 0;

    $isDoubleDash = 0;
    $timespan = undef;
    $isTimespanLines = 0;
    $epoch = undef;
    $within = undef;
    $reset = undef;
    $hasDifferentBase = 0;

    my $help = 0;
    my $man = 0;

    $isDoubleDash = grep(/^--$/, @$argumentsRef);	# Need to check this before Getopt::Long swallows the -- separator.

    GetOptionsFromArray($argumentsRef,
	'help|h|?' => \$help,
	'man' => \$man,
	"unbuffered|u" => sub {
	    use IO::Handle qw();
	    STDOUT->autoflush(1);
	},
	'date-pattern=s' => \$datePattern,
	'epoch-pattern=s' => \$epochPattern,
	'epoch-lines' => sub {
	    $datePattern = undef;
	    $epochPattern = qr/^@?(?<epoch>\d{1,10})(?:$|(?=\s))/;
	},
	'diff-pattern=s' => \$diffPattern,
	'relative-to=s' => sub {
	    my $baseDate = $_[1];
	    unless (($now = $baseDate) =~ s/^${datePattern}$/toEpoch($+{seconds}, $+{minutes}, $+{hours}, $+{day}, $+{month}, $+{year}, $+{timezone})/e ) {
		warn "$baseDate is not a valid BASE-DATE!\n";
		exit 2;
	    }
	    $hasDifferentBase = 1;
	},
	'relative-to-epoch=i' => sub {
	    $now = $_[1];
	    $hasDifferentBase = 1;
	},
	'relative-to-first' => sub {
	    $isRelative = 1;
	    $isEach = 0;
	},
	'relative-each' =>  sub {
	    $isRelative = 1;
	    $isEach = 1;
	},
	'delta-to-first' => sub {
	    $isDelta = 1;
	    $isEach = 0;
	},
	'delta-each' => sub {
	    $isDelta = 1;
	    $isEach = 1;
	},
	'within=s' => \$within,
	'reset=s' => \$reset,
	'keep-width:s' => \$keepWidth,
	'precision=i' => \$precision,
	'prefer-past' => \$isPreferPast,
	'prefer-future' => \$isPreferFuture,
	'with-weekday' => \$isWithWeekday,
	'workday' => \$isWorkDay,
	'color=s' => \$color,
	'no-color' => \$isNoColor,
	'prefix=s' => \$prefix,
	'suffix=s' => \$suffix,
	'timespan=s' => \$timespan,
	'timespan-lines' => \$isTimespanLines,
	'epoch=i' => \$epoch,
	'difference' => sub {
	    $relativizer = \&renderDifference;
	},
	'duration' => sub {
	    $relativizer = \&renderDuration;
	},
	'short-units' => \$isShortUnits,
	'short-relations' => \$isShortRelations,
	'short' => sub {
	    $isShortRelations = 1;
	    $isShortUnits = 1;
	},
    ) or pod2usage(2);
    pod2usage(-exitval => 0, -verbose => 0) if $help;
    pod2usage(-exitval => 0, -verbose => 2) if $man;
    pod2usage(-exitval => 2, -message => "--prefer-past and --prefer-future are mutually exclusive") if ($isPreferPast && $isPreferFuture);
    pod2usage(-exitval => 2, -message => 'cannot combine --no-color with --color') if ($isNoColor && $color ne 'never');
    pod2usage(-exitval => 2, -verbose => 0) unless grep { $color eq $_ } qw(never always auto);

    $colorPrefix = (defined $ENV{'RELDATE_COLOR_ON'} ? $ENV{'RELDATE_COLOR_ON'} : "\e[07m");
    $colorSuffix = (defined $ENV{'RELDATE_COLOR_OFF'} ? $ENV{'RELDATE_COLOR_OFF'} : "\e[0m");
    if ($color eq 'never' || $isNoColor || ($color eq 'auto' && ! is_interactive())) {
	$colorPrefix='';
	$colorSuffix='';
    }

    $DAY_IN_SECONDS = ($isWorkDay ? $ENV{'WORKDAY_SECONDS'} || 28800 : 86400);
    $WEEK_IN_SECONDS = ($isWorkDay ? $ENV{'WORKWEEK_SECONDS'} || $DAY_IN_SECONDS * 5 : 604800);

    push(@shortenUnitsMassage, (\&massageToShortUnits)) if ($isShortUnits);
    push(@defaultMassages, @shortenUnitsMassage);

    process($argumentsRef, $inputHandleRef);
}

__PACKAGE__->run(\@ARGV, \*ARGV) unless caller();

__END__

=head1 NAME

reldate - Show relative dates instead of absolute ones

=head1 SYNOPSIS

 echo TEXT-WITH-DATES | reldate [--date-pattern PATTERN] [--epoch-pattern PATTERN] [--diff-pattern PATTERN] [--relative-to BASE-DATE|--relative-to-epoch BASE-EPOCH|--relative-to-first|--relative-each|--delta-to-first|--delta-each] [--within (line|PATTERN|all] [--reset RESET-PATTERN)] [--keep-width] [--precision N] [--prefer-past|--prefer-future] [--with-weekday] [--color never|always|auto | --no-color] [--prefix STRING] [--suffix STRING] [--difference|--duration [--workday]] [--short] [--short-relations] [--short-units]
 reldate [...] -- FILE, reldate [...] FILE1 FILE2 ...

 reldate [...] --timespan [+-]SECONDS
 echo [+-]SECONDS | reldate [...] --timespan-lines

 reldate [...] --epoch EPOCH
 echo EPOCH | reldate [...] --epoch-lines

 reldate [...] FILE

    Options:
    --unbuffered                flush output after every line even when output is not to the terminal
    --date-pattern PATTERN	parse PATTERN as a date
    --epoch-pattern PATTERN	parse PATTERN as a Unix epoch (seconds since 1970)
    --diff-pattern PATTERN	parse PATTERN as time difference
    --relative-to BASE-DATE     make all dates relative to BASE-DATE
    --relative-to-epoch EPOCH   make all dates relative to EPOCH
    --relative-to-first         take the first date as an absolute base, then make all subsequent ones relative to the first
    --relative-each             take the first date as an absolute base, then make all subsequent ones relative to the previous one
    --delta-to-first            with the first date as (also relative) base, make all subsequent ones relative to that
    --delta-each                make all subsequent dates relative to the previous one
    --within (line|PATTERN|all) ... first date each line / in text matching PATTERN (within a line / the block delimited by RESET-PATTERN) / entire input
    --reset RESET-PATTERN       ... until RESET-PATTERN matches again
    --keep-width		maintain width of replaced date
    --precision N		max number of time units used
    --prefer-past		assume incomplete date is in past
    --prefer-future		assume incomplete date is in future
    --with-weekday		use "coming/the previous Monday" instead of "in two days /ago"
    --color never|always|auto   surround the relative date (and prefix / suffix if given) with reverse color
    --prefix STRING		text before relative date
    --suffix STRING		text after relative date
    --difference		replace dates with a simple difference in [-]SECONDS instead of relative dates
    --duration			replace dates with a duration in [Ww ][Dd ] [Hh ][Mm ][Ss]|[HH:]MM:SS instead of relative dates
    --workday			render days and larger units as working days
    --short-relations           use -/+ instead of earlier / later
    --short-units               use short units
    --short                     use -/+ and short units

    --timespan [+-]SECONDS      convert SECONDS difference to relative date
    --timespan-lines	        parse every line as SECONDS difference
    --epoch EPOCH               convert EPOCH seconds to relative date
    --epoch-lines	        parse every line as a Unix epoch (seconds since 1970)

    -?|-h|--help		brief help message
    --man			full documentation

=head1 OPTIONS

=over 8

=item B<--unbuffered|-u>

When the output is not to a terminal, there will be output buffering. This enables flushing after every line, so that you can use the command inside a pipeline and still receive timely updates.

=item B<--date-pattern>

Parse any match of PATTERN as a date.

By default, parses the following date formats:

 %Y%m%d
 %Y%m%d[ _-]%H:%M
 %Y%m%d[ _-]%H:%M:%S
 %Y-%m-%d
 %Y-%m-%d %H:%M
 %Y-%m-%d %H:%M:%S
 %d-%[mbB]-%Y
 %d-%[mbB]-%Y %H:%M
 %d-%[mbB]-%Y %H:%M:%S
 %[mbB] %d[,] %Y
 %[mbB] %d[,] %Y %H:%M
 %[mbB] %d[,] %Y %H:%M:%S
 %[mbB] %d[,] %H:%M
 %[mbB] %d[,] %H:%M:%S
 %Y-%m-%dT%H:%M:%S
 %Y-%m-%dT%H:%M:%SZ

Example PATTERNs:

 \b(?<year>\d\d\d\d)-(?<month>\d\d)-(?<day>\d\d)T(?<hours>\d\d):(?<minutes>\d\d):(?<seconds>\d\d)(?<timezone>Z)\b
 \b(?<year>\d\d\d\d)(?<month>\d\d)(?<day>\d\d)\b

=item B<--epoch-pattern>

Parse any match of PATTERN as a Unix epoch (seconds since 1970-01-01)

By default, parses C<@SSSSSSSSS> (number prefixed with C<@>) with this pattern:

 (?<!\w)@(?<epoch>\d{1,10})\b

=item B<--epoch-lines>

Parse every line as a Unix epoch (seconds since 1970-01-01; optionally followed by whitespace and other text that is ignored); this uses this pattern:

 ^@?(?<epoch>\d{1,10})(?:$|(?=\s))

=item B<--diff-pattern>

Parse any match of PATTERN as a time difference. The wording is similar as with C<--relative-each>, referring to I<earlier> and I<later> dates. Is not active when any of the C<--relative-...> or C<--delta-...> options are given.

By default, parses the following differences:

 +HHH:MM:SS
 +MMM:SS
 -HHH:MM:SS
 -MMM:SS

=item B<--relative-to>, B<--relative-to-epoch>

Relate dates to passed BASE-DATE (also parsed according to C<--date-pattern>) or BASE-EPOCH instead of comparing to the current date. Relative dates will refer to I<it> and I<at its time> instead of now (except when used together with C<--delta-to-first>, where I<it> will refer to the first date).

Also works for C<--epoch> and C<FILE>.

=item B<--relative-to-first>

Within the parsed block (cp. C<--within> and C<--reset>), the first found date is printed as-is, and taken as the base for the rest of the block. All subsequent dates refer to that first one with the subject I<it>.

=item B<--relative-each>

Within the parsed block (cp. C<--within> and C<--reset>), the first found date is printed as-is. Each following date is made relative to the preceding one, which is referred to as I<also then> / I<earlier> / I<later>.

=item B<--delta-to-first>

Within the parsed block (cp. C<--within> and C<--reset>), the first found date is printed relative to the the current date (that's the difference to C<--relative-to-first>), and taken as the base for the rest of the block. All subsequent dates refer to that first one with the subject I<it>.

=item B<--delta-each>

Within the parsed block (cp. C<--within> and C<--reset>), the first found date is printed relative to the the current date (that's the difference to C<--relative-each>). Each following date is made relative to the preceding one, which is referred to as I<also then> / I<earlier> / I<later>.

=item B<--within>

Specifies what I<first> represents for C<--relative-to-first>, C<--relative-each> (kept absolute), C<--delta-to-first>, C<--delta-each> (make relative to the base date). For the normal processing, PATTERN can limit where translation of absolute to relative dates happens.

The default scope is individual lines, or ranges delimited by RESET-PATTERN. In the latter case, C<line> explicitly switches back to first in each line. C<all> reads the entire input as one big record, so the first date really only is the very first one.

=item B<--reset>

Separator pattern (unanchored) that makes up ranges where C<--within> is then applied. By default, individual lines are processed.

=item B<--keep-width>

Pad any shorter relative date so that it occupies the same space as the original one.

=item B<--precision>

No more than N units will be used in expressing the time duration. Default is 1, so it uses only one of seconds / minutes / hours / days / ...

=item B<--prefer-past>

If an incomplete date specification (e.g. without a year) is parsed, assume that the date is in the past.

=item B<--prefer-future>

If an incomplete date specification (e.g. without a year) is parsed, assume that the date is in the future.

=item B<--with-weekday>

For days that are within 7 days, use "coming/the previous Monday" instead of "in two days /ago". For days that are longer in the future or past, append the weekday to the relative date.

=item B<--color>

=item B<--no-color>

Surround the relative date (and prefix / suffix if given) with escape sequences to display them in color on the terminal. The colors are defined by the environment variable RELDATE_COLOR_ON and RELDATE_COLOR_OFF.

=item B<--prefix>

STRING to put before a recognized relative date. E.g. [ or ^[[01m.

=item B<--suffix>

STRING to put after a recognized relative date. E.g. ] or ^[[0m.

=item B<--difference>

Replace dates with a simple difference counted in seconds instead of relative dates. E.g. "2 minutes later" becomes "120".

=item B<--duration>

Replace dates with a duration in [Ww ][Dd ] [Hh ][Mm ][Ss]|[HH:]MM:SS instead of relative dates. E.g. "2 minutes later" becomes "02:11".

With C<--precision>, only the given number of (largest) units is rendered, so 01:02:03 will be rendered with precision 2 as "1h 2m", with "3s" removed.

=item B<--workday>

Render days and larger units as working days (comprised of 8 hours, not 24) instead of calendar days, and adapt the unit (C<1wd>, not C<1d>), too. The exact counting can be configured via $WORKDAY_SECONDS and $WORKWEEK_SECONDS environment variables.

=item B<--short-relations>

Use "+2 minutes" instead of "2 minutes later".

=item B<--short-units>

Use "2m" instead of "2 minutes".

=item B<--short>

Combination of C<--short-relations> and C<--short-units>.

Use "+2m" instead of "2 minutes later".

=item B<--timespan>

SECONDS of time difference to directly convert to a relative date. Negative SECONDS lie in the future.

Without a [+-] sign, prints a neutral representation of the passed time (e.g. I<16 minutes> instead of I<16 minutes ago>).

=item B<--timespan-lines>

Parse every line as SECONDS of time difference; optionally followed by whitespace and other text that is ignored).

=item B<--epoch>

Convert EPOCH seconds since the epoch (1970-01-01 UTC) to relative date.

=item B<--help>, B<-h>, B<-?>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<reldate> turns absolute dates (e.g. I<09-02-2016>) into timespans relative to the current date (I<2 days ago>).

It parses text from stdin (or passed FILE(s)) and replaces any date [as specified by PATTERN] with a relative one.

It directly converts the passed / read from stdin timespan (in SECONDS), or EPOCH.

It prints the modification date, relative to now, of the passed FILE.

=head1 DEPENDENCIES

On Ubuntu, this requires the following packages:

  $ apt-get install libio-interactive-perl libmodern-perl-perl libtime-duration-perl

On CentOS, this requires the following packages:

  $ yum install perl-Modern-Perl perl-Time-Duration perl-Time-Piece

=head1 DEVELOPMENT

Run the test suite from the project directory via

  $ prove -I.

=cut
